#include <iostream>
#include <vector>
#include <algorithm>
#include <limits.h>
#include <queue>
using namespace std;

/*
*  내리막길 bfs를 사용하는데 visit 배열을 쓰는게 아니라 크기비교를 이용한다.
*/

// 나라 수, 찾을 나라
int n, m;
vector<vector<int>> board;
typedef pair<int, int> pi;

int mx[] = { 1, -1, 0 ,0 };
int my[] = { 0, 0 , 1, -1 };
int dp[500][500];

void fillBoard();

void BFS();

struct cmp
{
	bool operator()(pi a, pi b)
	{
		return board[a.first][a.second] < board[b.first][b.second];
	}
};

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	// 가로 세로 입력
	cin >> n >> m;

	fillBoard();
	BFS();

	cout << dp[n-1][m-1];
}

void BFS()
{

	// 이동할 q 저장
	queue<pair<int, int>> q;

	// 원점에서 n-1, m-1 에 도달 할때 까지
	q.push({ 0,0 });
	priority_queue<pair<int,int>, vector<pair<int,int>>, cmp> pq;

	//BFS 알고리즘
	while (!q.empty() || !pq.empty())
	{
		pair<int, int> cur;
		if (!q.empty())
		{
			cur = q.front();
			q.pop();
		}
		else
		{
			cur = pq.top();
			pq.pop();
		}
		int x = cur.first;
		int y = cur.second;
		if (x == n - 1 && y == m - 1)
		{
			continue;
		}

		for (int i = 0; i < 4; i++)
		{
			int nx = mx[i] + x;
			int ny = my[i] + y;

			if (nx < 0 || nx >= n) { continue; }
			if (ny < 0 || ny >= m) { continue; }

			if (board[x][y] <= board[nx][ny]) { continue; }
			if (dp[nx][ny] == 0) 
			{
				pq.push({ nx, ny });
			}
			
			dp[nx][ny] += dp[x][y];
		}
	}

}

void fillBoard()
{
	for (int i = 0; i < n; i++)
	{
		// board에 넣을 백터
		vector<int> floor;
		for (int j = 0; j < m; j++)
		{
			// board 각각의 높이
			int high;
			cin >> high;
			floor.push_back(high);
		}
		board.push_back(floor);
	}
	dp[0][0] = 1;
}