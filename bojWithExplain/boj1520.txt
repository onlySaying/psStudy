#include <iostream>
#include <vector>
#include <algorithm>
#include <limits.h>
#include <queue>
using namespace std;

/*
*  내리막길 bfs를 사용하는데 visit 배열을 쓰는게 아니라 크기비교를 이용한다.
*  시간 초과가 나왔다 문제 해결 방법을 보니 dp를 써야한다고 한다.
*  BFS를 쓸 경우 우선순위 큐를 써야한다는 것을 확인함
*  DFS로 선회해서 풀기로 함
*/

// 나라 수, 찾을 나라
int n, m;
vector<vector<int>> board;

int mx[] = { 1, -1, 0 ,0 };
int my[] = { 0, 0 , 1, -1 };

void fillBoard();
// dp를 써야한다고 한다.
int dp[500][500];

int DFS(int x, int y);

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	fillBoard();

	int ans = 0;
	
	ans = DFS(0,0);
	
	cout << ans;
}

int DFS(int x, int y)
{
	// 목적지 도착
	if (x == n - 1 && y == m - 1)
	{
		return 1;
	}
	
	// 시간 초과 해결법 visit 배열을 쓰지 않고 이미 방문한 노드라면 +1 해주는 방식으로 해결해준다.
	//실제로 계산된 값이 0이어도 재계산이 이루어지지 않고 바로 리턴을 해줘야 합니다.
	// 사실 뭔 말인지 모르겠다. 음수가 없는데
	// 0일때 옆으로 넘어가면 0이니깐 반복이 나올 수 있다는 걸 깨달았다.
	if (dp[x][y] != -1) { return dp[x][y]; }
	// -1이 여러개 중첩된게 넘어온 것일 수도 있으므로 값을 초기화 해준다.
	dp[x][y] = 0;
	for (int i = 0; i < 4; i++)
	{
		int nx = mx[i] + x;
		int ny = my[i] + y;

		if (nx < 0 || nx >= n) { continue; }
		if (ny < 0 || ny >= m) { continue; }

		if (board[x][y] <= board[nx][ny]) { continue; }

		dp[x][y] = dp[x][y] + DFS(nx, ny);
	}
	return dp[x][y];
}

void fillBoard()
{
	// 가로 세로 입력
	cin >> n >> m;

	// 백터 채우기
	for (int i = 0; i < n; i++)
	{
		// board에 넣을 백터
		vector<int> floor;
		for (int j = 0; j < m; j++)
		{
			// board 각각의 높이
			int high;
			cin >> high;
			floor.push_back(high);
			dp[i][j] = -1;
		}
		board.push_back(floor);
	}
}