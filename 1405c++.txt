#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>


using namespace std;

//move direction e,w,s,n
int mx[4] = { 1,-1,0,0 };
int my[4] = { 0,0,-1,1 };
const int maxM = 15;
//dfs visit array bigger than size n*2 
bool visit[(maxM*2)+2][(maxM * 2) + 2];
int n;
vector<double> dir(4);

void dfs(int x, int y, int cnt, double per, double& ans)
{
	if (cnt == n) return;

	visit[x][y] = true;


	for (int i = 0; i < 4; i++)
	{
		int nx = mx[i] + x;
		int ny = my[i] + y;

		if (visit[nx][ny])
		{
			double p = per * dir[i];
			ans += p;
			continue;
		}

		dfs(nx, ny, cnt + 1, (per * dir[i]), ans);
	}

	visit[x][y] = false;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	// robot's movetimes
	
	cin >> n >> dir[0] >> dir[1] >> dir[2] >> dir[3];
	for (int i = 0; i < 4; i++)
	{
		dir[i] /= 100;
	}
	double per = 0;
	double *ans = &per;

	dfs(n, n, 0, 1, *ans);
	
	cout << fixed;
	cout.precision(10);
	cout << 1 - *ans;

	return 0;
}