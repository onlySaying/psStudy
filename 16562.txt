#include<iostream>
#include<vector>
#include<algorithm>
#include<math.h>
#include<limits.h>
using namespace std;
typedef pair<int, int> pi;
int INF = INT_MAX;
int INFM = INT_MIN;
int n, m, k;
vector<int> price;
vector<int> p(10005, -1);
bool visit[10005];

int find(int x)
{
	if (p[x] < 0)
	{
		return x;
	}
	return p[x] = find(p[x]);
}

void Union(int u, int v)
{
	u = find(u); v = find(v);
	if (u == v) { return; }
	if (u != v)
	{
		if (price[u] >= price[v])
			p[u] = v;
		else
			p[v] = u;
	}
	
}

void input()
{
	cin >> n >> m >> k;
	price = vector<int>(n+1);

	for (int i = 0; i < n; i++)
	{
		cin >> price[i+1];
	}
	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		Union(x, y);
	}

}

void solve()
{
	int ans = 0;
	for (int i = 1; i <= n; i++)
	{
		int cur = find(i);
		if (!visit[cur]) {
			ans += price[cur];
			visit[cur] = true;
			visit[cur] = true;
		}
	}

	if (ans > k)
	{
		cout << "Oh no";
		return;
	}

	cout << ans;
	return;
}
int main()

{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	input();
	solve();

	return 0;
}