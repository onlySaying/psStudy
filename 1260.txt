#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include <stack>
using namespace std;

vector<int> adj[1002];
bool visitD[1002];
bool visitB[1002];
int n, m;

void DFS(int s)
{
	stack<int> st;
	st.push(s);

	while (!st.empty())
	{
		int cur = st.top();
		st.pop();
		if (visitD[cur])continue;
		visitD[cur] = true;
		cout << cur+1 << ' ';
		for (int i = adj[cur].size(); i > 0; i--)
		{
			int nxt = adj[cur][i - 1];
			st.push(nxt);
		}
	}
}

void BFS(int s)
{
	queue<int> q;
	q.push(s);
	visitB[s] = true;
	while (!q.empty())
	{
		int cur = q.front();
		cout << cur+1 << " ";
		q.pop();
		for (auto nxt : adj[cur])
		{
			if (visitB[nxt]) continue;
			q.push(nxt);
			visitB[nxt] = true;
		}
	}
}

int main(void)
{
	cin.tie(0);
	ios::sync_with_stdio(0);
	int s;
	cin >> n >> m >> s;
	s -= 1;
	int u, v;
	for (int i = 0; i < m; i++)
	{
		cin >> u >> v;
		u -= 1;
		v -= 1;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	for (int i = 0; i < n; i++)
	{
		sort(adj[i].begin(), adj[i].end());
	}

	DFS(s);
	cout << '\n';
	BFS(s);
	
	return 0;
}