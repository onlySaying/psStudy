#include<iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <queue>
#include <tuple>

using namespace std;

int mx[8] = { -1, 0, 1 , -1, 1, -1,0, 1 };
int my[8] = { -1, -1, -1 ,0, 0, 1, 1,1 };

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n, m, k;
	cin >> n >> m >> k;

	vector<vector<char>> v;
	string ele;
	
	for (int i = 0; i < n; i++)
	{
		cin >> ele;
		vector<char> temp;
		for (int j = 0; j < m; j++)
		{
			temp.push_back(ele[j]);
		}
		v.push_back(temp);
	}

	unordered_map <string,int> love;
	int maxSize = 0;
	vector<string> orderS;
	for (int i = 0; i < k; i++)
	{
		cin >> ele;
		love.insert({ ele, 0 });
		orderS.push_back(ele);
		if (maxSize < ele.size())
		{
			maxSize = ele.size();
		}
	}

	queue <tuple<int,int,string>> q;
	string makeS;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			makeS = "";
			makeS += v[i][j];
			q.push(make_tuple(i,j,makeS));
			while (!q.empty())
			{
				tuple<int, int, string> cur = q.front();
				q.pop();
				if (love.find(get<2>(cur)) != love.end())
				{
					love[get<2>(cur)]++;
				}
				if (get<2>(cur).size() == maxSize)
				{
					continue;
				}

				for (int a = 0; a < 8; a++)
				{
				
					int x = get<0>(cur) + mx[a];
					int y = get<1>(cur) + my[a];

					if (x < 0)
					{
						x = n-1;
					}
					else if (x == n)
					{
						x = 0;
					}

					if (y < 0)
					{
						y = m-1;
					}
					else if (y == m)
					{
						y = 0;
					}

					string now = get<2>(cur);
					now += v[x][y];
					q.push({ x,y,now });
				}
			}
		}
	}

	for (int i = 0; i < orderS.size(); i ++)
	{
		cout << love[orderS[i]] << "\n";
	}

}