#include <iostream>
#include <vector>
#include <algorithm>
#include<queue>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;

int dis[20002];
const int INF = 200002;

struct cmp {
	bool operator()(pi a, pi b)
	{
		if (a.second == b.second)
		{
			return a.first > b.first;
		}
		return a.second > b.second;
	}
};

int main(void)
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int v, e;
	cin >> v >> e;
	
	int sn;
	cin >> sn;
	vector<vector<pi>> gr(v+1);

	fill(dis, dis + v + 1, INF);

	for (int i = 0; i < e; i++)
	{
		int st, en, co;
		cin >> st >> en >> co;
		gr[st].push_back({ en, co });
	}
	dis[sn] = 0;

	priority_queue<pair<int, int>, vector<pi>, cmp> pq;

	pq.push({sn, dis[sn]});

	while (!pq.empty())
	{
		pi cur = pq.top();
		pq.pop();

		if (dis[cur.first] < cur.second)
		{
			continue;
		}
		dis[cur.first] = cur.second;
		for (pi a : gr[cur.first])
		{
			if (dis[a.first] >= a.second + cur.second)
			{
				dis[a.first] = a.second + cur.second;
				pq.push({ a.first, a.second + cur.second });
			}
		}
	}
	
	for (int i = 1; i <= v; i++)
	{
		if (i == sn)
		{
			cout << "0\n";
		}
		else if (dis[i] == INF)
		{
			cout << "INF\n";
		}
		else
		{
			cout << dis[i] << '\n';
		}
	}
	

	return 0;
}