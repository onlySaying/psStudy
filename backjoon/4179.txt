#include<iostream>
#include<vector>
#include <queue>
using namespace std;

int mx[] = { 1, -1 , 0 , 0 };
int my[] = { 0,0, 1, -1 };
int n, m;
int answer = 10000000;
int dist1[1001][1001];
int dist2[1001][1001];

int main()
{

	cin >> n >> m;
	vector<vector<char>> draw;
	char temp;
	queue<pair<int, int>> jArea;
	queue<pair<int, int>> fArea;
	for (int i = 0; i < n; i++)
	{
		vector<char> array;
		for (int j = 0; j < m; j++)
		{
			cin >> temp;
			if (temp == 'J')
			{
				jArea.push(make_pair(i, j));
				dist2[i][j] = 1;
			}
			else if (temp == 'F')
			{
				fArea.push(make_pair(i, j));
				dist1[i][j] = 1;
			}
			array.push_back(temp);
		}
		draw.push_back(array);
	}

	while (!fArea.empty())
	{
		pair<int, int> cur = fArea.front();
		fArea.pop();

		for (int dir = 0; dir < 4; dir++)
		{
			int x = cur.first + mx[dir];
			int y = cur.second + my[dir];
			if (x < 0 || x >= n || y < 0 || y >= m) { continue; }
			if (dist1[x][y] > 0 || draw[x][y] == '#') { continue; }
			dist1[x][y] = dist1[cur.first][cur.second] + 1;
			fArea.push(make_pair(x, y));
		}
	}

	while (!jArea.empty())
	{
		pair<int, int> cur = jArea.front();
		jArea.pop();
		if (cur.first == n - 1 || cur.first == 0 || cur.second == m - 1 || cur.second == 0)
		{
			answer = min(answer, dist2[cur.first][cur.second]);
		}

		for (int dir = 0; dir < 4; dir++)
		{

			int x = cur.first + mx[dir];
			int y = cur.second + my[dir];
			//cout << "x : " << x << " y : " << y << endl;
			if (x < 0 || x >= n || y < 0 || y >= m) { 
				//cout << "a\n"; 
				continue; }
			if (dist2[x][y] > 0 || draw[x][y] == '#') { //cout << "b\n"; 
				continue; }
			dist2[x][y] = dist2[cur.first][cur.second] + 1;
			if (dist1[x][y] != 0)
			{
				if (dist2[x][y] >= dist1[x][y]) { //cout << "c\n"; 
					continue;
				}
			}
			jArea.push(make_pair(x, y));
		}
	}


	if (answer == 10000000)
	{
		cout << "IMPOSSIBLE";
		return 0;
	}
	cout << answer;
	return 0;
}