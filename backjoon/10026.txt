#include<iostream>
#include<vector>
#include <queue>
#include <memory.h>
using namespace std;

bool visitRGB[101][101];

int mx[] = { 1,-1 ,0 ,0 };
int my[] = { 0,0, 1, -1 };
int n = 0;

void findArea(vector<vector<char>> rgbZone, queue<pair<int, int>> colors, char color)
{
	int x, y;
	while (!colors.empty())
	{
		pair<int, int> cur = colors.front();
		colors.pop();
		for (int i = 0; i < 4; i++)
		{
			x = cur.first + mx[i];
			y = cur.second + my[i];
			
			if (x < 0 || x >= n || y < 0 || y >= n) { continue; }
			if (visitRGB[x][y] || rgbZone[x][y] != color) { continue; }
			visitRGB[x][y] = true;
			colors.push(make_pair(x, y));
		}
	}
}

int main()
{
	cin >> n;
	string line;
	vector<vector<char>> rgb;
	vector<vector<char>> rb;
	for (int i = 0; i < n; i++)
	{
		vector<char> rgbLine;
		vector<char> rbLine;
		cin >> line;
		for (int j = 0; j < n; j++)
		{
			rgbLine.push_back(line[j]);
			if (line[j] == 'G')
			{
				rbLine.push_back('R');
			}
			else
			{
				rbLine.push_back(line[j]);
			}
		}
		rgb.push_back(rgbLine);
		rb.push_back(rbLine);
	}

	int B = 0;
	int rgbR = 0, rgbG = 0;
	int rbR = 0;
	queue<pair<int, int>> colors;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (visitRGB[i][j]) { continue; }
			if (rb[i][j] == 'B') 
			{
				B++;
				colors.push(make_pair(i, j));
				findArea(rb, colors, 'B');			
			}
			else
			{
				rbR++;
				colors.push(make_pair(i, j));
				findArea(rb, colors, 'R');
			}
			while (!colors.empty()) { colors.pop(); }
			
		}
	}

	memset(visitRGB, false, sizeof(visitRGB));
	
	for (int i = 0; i < n; i++)
	{
		
		for (int j = 0; j < n; j++)
		{
			if (visitRGB[i][j]) { continue; }
			if (rgb[i][j] == 'R')
			{
				rgbR++;
				colors.push(make_pair(i, j));
				findArea(rgb, colors, 'R');
			}
			else if(rgb[i][j] == 'G')
			{
				rgbG++;
				colors.push(make_pair(i, j));
				findArea(rgb, colors, 'G');
			}
			while (!colors.empty()) { colors.pop(); }

		}
	}

	cout << rgbR + rgbG + B<<" "<< B + rbR;
	return 0;
}