#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

typedef long long ll;
typedef pair<int, int> pi;

const int INF = 10000002;


struct cmp {
	bool operator()(pi a, pi b)
	{
		if (a.second == b.second)
		{
			return a.first > b.first;
		}
		return a.second > b.second;
	}
};

vector<int> dijkstra(int n, int x, vector<vector<pi>>& adj)
{
	priority_queue<pi, vector<pi>, cmp> pq;
	vector<int> dis(n+1, INF);
	dis[x] = 0;
	pq.push({ x,0});

	int cost, now;
	int nxtC, nxt;
	while (!pq.empty())
	{
		now = pq.top().first;
		cost = pq.top().second;
		pq.pop();
		if (dis[now] < cost) { continue; }
		for (int i = 0; i < adj[now].size(); i++)
		{
			nxt = adj[now][i].first;
			nxtC = cost + adj[now][i].second;
			//cout << "now : " << now << " cost : " << cost;
			//cout << " nxt : " << nxt << " nxtC : " << nxtC << endl;
			if (dis[nxt] > nxtC)
			{
				dis[nxt] = nxtC;
				//cout << "dis[now] : " << dis[now] << " dis[next] : " << dis[nxt] << endl;
				pq.push({ nxt,nxtC });
			}
			
		}
	}

	return dis;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	// n is student num , m is billage num
	int n, m;
	// x is destination
	int x;

	cin >> n >> m >> x;

	vector<vector<pi>> adj(n+1);
	vector<vector<pi>> adjR(n+1);

	for (int i = 0; i < m; i++)
	{
		int st, en, co;
		cin >> st >> en >> co;

		adj[st].push_back({ en,co });
		adjR[en].push_back({ st,co });
	}
	// arrive destiny and go to the guys house
	
	
	
	vector<int> dis1 = dijkstra(n,x,adj);
	vector<int> dis2 = dijkstra(n,x,adjR);
	
	int maxT = -1;

	for (int i = 1; i <= n; i++)
	{
		maxT = max(maxT, dis1[i]+dis2[i]);
	}
	
	cout << maxT;

	

	return 0;
}